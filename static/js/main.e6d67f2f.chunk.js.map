{"version":3,"sources":["components/Navigation/Navigation.js","components/Home/Home.js","components/Portfolio/minesweeper_landing.png","components/Portfolio/minesweeper_easy.png","components/Portfolio/Portfolio.js","components/Contact/instagram.svg","components/Contact/linkedin.svg","components/Contact/github.svg","components/Contact/Contact.js","components/Contact/email.svg","components/Articles/ArticleHeader.js","components/Articles/Pages/AlgorithmBasics.js","components/Articles/Pages/MemoryPointersDynamicProgramming.js","ArticleRoutes.js","components/Footer/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Navigation","className","exact","to","activeClassName","Home","useEffect","document","title","src","Portfolio","href","target","minesweeperLanding","minesweeperEasy","Contact","instagram","linkedin","github","ArticleHeader","date","class","AlgorithmBasics","text","language","theme","railscast","MemoryPointersDynamicProgramming","ArticleRoutes","path","Footer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e6d67f2f.chunk.js","sourcesContent":["import './Navigation.css'\nimport { NavLink } from 'react-router-dom'\n\nconst Navigation = () => {\n  return (\n    <div className='Navigation-container'>\n      <ul className='Navigation-list'>\n        <li><NavLink exact to='/'  className='Navigation-link' activeClassName='Navigation-link-active'>home</NavLink></li>\n        <li><NavLink to='/portfolio' className='Navigation-link' activeClassName='Navigation-link-active'>portfolio</NavLink></li>\n        <li><NavLink to='/contact' className='Navigation-link' activeClassName='Navigation-link-active'>contact</NavLink></li>\n      </ul>\n    </div>\n  )\n}\n\nexport default Navigation","import './Home.css'\nimport { useEffect } from 'react'\n\nconst Home = () => {\n\n  useEffect(() => document.title = 'Home | Brendan Chess', [])\n\n  return (\n    <div className='Page-container'>\n      <img className='Home-pfp' src='https://firebasestorage.googleapis.com/v0/b/personal-site-280c7.appspot.com/o/bchess_circle_small.png?alt=media&token=12e24fee-d45d-42a1-a50c-3e7929d9a486' />\n      <div className='Page-divider' />\n      <div className='Page-title'>Brendan Chess</div>\n      <div className='Page-divider' />\n      <div className='Page-paragraph'>React + React Native developer</div>\n      <div className='Page-paragraph'>Senior at Arizona State University studying Computer Science</div>\n    </div>\n  )\n}\n\nexport default Home","export default __webpack_public_path__ + \"static/media/minesweeper_landing.dfd80455.png\";","export default __webpack_public_path__ + \"static/media/minesweeper_easy.916f8a27.png\";","import { useEffect } from 'react'\nimport minesweeperLanding from './minesweeper_landing.png'\nimport minesweeperEasy from './minesweeper_easy.png'\nimport './Portfolio.css'\n\nconst Portfolio = () => {\n\n  useEffect(() => document.title = 'Portfolio | Brendan Chess', [])\n\n  return (\n    <div className='Page-container Portfolio-container'>\n      <div className='Page-divider' />\n      <div className='Page-title'>Portfolio</div>\n      <div className='Page-divider' />\n      <div className='Portfolio-sections'>\n        <div className='Portfolio-section-title'>Projects</div>\n        <a href='https://minesweepergame.io' target=\"_blank\" className='Portfolio-section-subtitle'>minesweepergame.io</a>\n        <div className='Portfolio-section-text'>My take on the classic game. I wanted to give minesweeper a cosmetic overhaul while keeping the same mechanics. It was built completely with React, is mobile friendly, and has no ads!</div>\n        <div className='Portfolio-section-gallery'>\n          <img className='Portfolio-section-img' src={minesweeperLanding} />\n          <img className='Portfolio-section-img' src={minesweeperEasy} />\n        </div>\n        <div className='Portfolio-section-title'>Work Experience</div>\n        <div className='Portfolio-section-subtitle'>Technical Co-Founder at Greek Rental LLC</div>\n        <div className='Portfolio-section-text'>- Built company website from scratch using React, Firebase, and Stripe</div>\n        <div className='Portfolio-section-text'>- Assisted in website design using Adobe XD</div>\n        <div className='Portfolio-section-text'>- Participated in development of business strategy</div>\n        <div className='Portfolio-section-subtitle'>Software Engineer Intern at RealTime Sports</div>\n        <div className='Portfolio-section-text'>- Lead development of internal tools used for operating sports-based contests</div>\n        <div className='Portfolio-section-text'>- Built components in user-facing iOS app with React Native and Firebase</div>\n        <div className='Portfolio-section-text'>- Participated in daily stand-up meetings, followed agile process</div>\n      </div>\n    </div>\n  )\n}\n\nexport default Portfolio","export default __webpack_public_path__ + \"static/media/instagram.ff8a2cde.svg\";","export default __webpack_public_path__ + \"static/media/linkedin.826d528e.svg\";","export default __webpack_public_path__ + \"static/media/github.f92762bf.svg\";","import './Contact.css'\nimport { useEffect } from 'react'\nimport instagram from './instagram.svg'\nimport linkedin from './linkedin.svg'\nimport github from './github.svg'\nimport email from './email.svg'\n\nconst Contact = () => {\n\n  useEffect(() => document.title = 'Contact | Brendan Chess', [])\n\n  return (\n    <div className='Page-container'>\n      <div className='Page-divider' />\n      <div className='Page-title'>Contact</div>\n      <div className='Page-divider' />\n      <div className='Page-paragraph Contact-email'>brendanchess25@gmail.com</div>\n      <div className='Contact-row'>\n        <a href='https://www.instagram.com/brendan_chess/'><img src={instagram} /></a>\n        <a href='https://www.linkedin.com/in/brendan-chess-67196421b/'><img src={linkedin} /></a>\n        <a href='https://github.com/brendan-chess'><img src={github} /></a>\n      </div>\n    </div>\n  )\n}\n\nexport default Contact","export default __webpack_public_path__ + \"static/media/email.c9f7c884.svg\";","const ArticleHeader = ({ title, date }) => {\n  return (\n    <>\n      <div class='Article-title'>{title}</div>\n      <div class='Article-author'>\n        <span>by Brendan Chess</span>\n      </div>\n      <div class='Article-paragraph'>{date}</div>\n    </>\n  )\n}\n\nexport default ArticleHeader","import { useEffect } from 'react'\nimport { CodeBlock, railscast } from \"react-code-blocks\"\nimport ArticleHeader from \"../ArticleHeader\"\n\nconst AlgorithmBasics = () => {\n\n  useEffect(() => document.title = 'Basics of Algorithm Analysis | Brendan Chess', [])\n\n  return (\n    <div class='Article-container'>\n      <div class='Article-body'>\n\n        <ArticleHeader\n          title='Basics of Algorithm Analysis'\n          date='January 2022'\n        />\n\n        <div class='Article-paragraph'>\n        Algorithms have become sort of a buzzword. You have probably heard about the YouTube algorithm, which determines which videos are recommended to you. You may even be familiar with how Spotify uses an algorithm to recommend new songs for you to listen to, based on music you already like. The public perception of algorithms is probably along the lines of “they do a lot of complicated things behind the scenes”. But if you are studying computer science, then let's take a step back and define what algorithms are and discuss some basics that you should know about them.\n        </div>\n\n        <div class='Article-paragraph'>\n        An algorithm can simply be defined as a series of computational steps. Any program that you have written is essentially an algorithm. You could even consider a recipe for making a meal to be an algorithm. It really just comes down to being any set of instructions. Algorithms also tell us something; they always produce some sort of output. They are always given some input, and operate on that input to produce a result. Since the definition of an algorithm is so broad, the input and output can take many different forms. For instance, a pathfinding algorithm will output a set of driving directions for your road trip. A search engine’s algorithm will output a list of web pages that are related to your query. Any sort of process that takes some input, performs a set of operations on that input, and returns some output, can be considered an algorithm.\n        </div>\n\n        <div class='Article-paragraph'>\n        When we talk about algorithms, we are usually concerned with their performance. By performance, we are talking about the time they take to run, and the space in memory they use. Instead of trying to quantify time and space, we actually just want to think about how much more time and space they take as they are provided with bigger inputs. The performance of an algorithm is related to the size of its input. For instance, you can imagine that a sorting algorithm would be quick to sort 10 numbers, but take much longer to sort 10 million numbers. But how much longer would it take? This growth in the algorithm's running time (and space used), as related to the size of its input, is known as its efficiency. \n        </div>\n\n        <div class='Article-paragraph'>\n        When talking about algorithm efficiency, we use a standard called Big-O notation. Big-O notation uses the variable ‘n’ to represent the size of an algorithm’s input. We can describe the rate at which the runtime grows in terms of n. To do this, we have to analyze the code of an algorithm. As an example, let's look at an algorithm which prints every element in a list:\n        </div>\n\n        <div class='Article-code-block'>\n        <CodeBlock \n          text={`function printList(list) {\n  for(let i = 0; i < list.length; i++) {\n    console.log(list[i]);\n  }\n}`}\n          language='javascript'\n          theme={railscast}\n        />\n        </div>\n\n        <div class='Article-paragraph'>\n        This code consists of a for loop, and the number of times that the loop iterates depends on the length of the input list. That length becomes our variable n in this case. If we were to add one more element to the list, then the for loop would iterate one more time. If we added 1 million more elements, then the for loop would iterate 1 million more times. The runtime of this algorithm grows in a linear fashion, as n increases. Because of that observation, this algorithm at least has a time complexity of O(n), read as “big O of n”. We say at least because we may come across a worse time complexity later on in the code. The worst time complexity that we find is actually all that we use to describe the overall time complexity of the algorithm. We do that because the increase in runtime caused by other more efficient parts of code are insignificant compared to how much the least efficient parts will increase the runtime.\n        </div>\n\n        <div class='Article-paragraph'>\n        To finish, we have to examine line 3. How much time does this line take? Accessing the ith element of the list will take the same amount of time if the list has 10 elements or 10 million elements. Following that, printing that element with <span class='Article-paragraph-code'>console.log()</span> also takes the same amount of time regardless of the size of the list. Therefore, this line runs in constant time; no matter what the size of the input list is, this line has the same runtime. In Big-O notation this is expressed as O(1), read as “big O of one”. Because O(1) is more efficient than O(n), and we have analyzed all lines of code in this algorithm, we can conclude that the time-complexity of this algorithm is O(n), where n is the length of the input list. The space complexity of this algorithm is O(1) because the algorithm does not declare any variables. The amount of space used in memory from the start of the algorithm to when it finishes remains constant.\n        </div>\n\n        <div class='Article-paragraph'>\n        In addition to O(1) and O(n), here are some other fundamental space-time complexities that you will encounter:\n        </div>\n\n        <div class='Article-paragraph'>\n        • O(logn) and O(nlogn) - These runtimes often occur in algorithms that operate on tree data structures. This happens because the height of a tree equals logn.\n        </div>\n\n        <div class='Article-paragraph'>\n        • O(n²) - Just as a for-loop creates an O(n) runtime, a double for-loop creates an O(n²) time. This is because you are performing n operations on each element in an input of size n.\n        </div>\n\n        <div class='Article-paragraph'>\n        Analyzing the efficiency of algorithms gets much more complicated than this. One topic to look out for if you are learning about algorithms in school is recurrence relations, which describe the efficiency of recursive algorithms. Also, conditional statements (like if and while) are a bit tricky. They don’t necessarily have a relationship with the size of the input, yet they can still have an influence on space-time complexity. Regardless, I hope that this article gave you, or has strengthened your understanding of the basic ideas about algorithms and what you should know about them.\n        </div>\n\n      </div>\n    </div>\n  )\n}\n\nexport default AlgorithmBasics","import { useEffect } from 'react'\nimport { CodeBlock, railscast } from \"react-code-blocks\"\nimport ArticleHeader from \"../ArticleHeader\"\n\nconst MemoryPointersDynamicProgramming = () => {\n\n  useEffect(() => document.title = 'Memory, Pointers, and Dynamic Programming | Brendan Chess', [])\n\n  return (\n    <div class='Article-container'>\n      <div class='Article-body'>\n\n        <ArticleHeader\n          title='Memory, Pointers, and Dynamic Programming'\n          date='January 2022'\n        />\n\n        <div class='Article-paragraph'>\n        It’s important to understand not just how to write code, but what our computer actually does when we run our code. When we run code, it makes use of memory in our computer. Memory is often called RAM, which is short for random access memory. Random access means that the time memory is used and amount of memory that is used can vary. In other words, memory is a big space that is available for any program to use at any time, in any way that it needs to. But what exactly does memory look like, and how does it relate to the code we write? Let’s get into those details.\n        </div>\n\n        <div class='Article-paragraph'>\n        Physically, memory is a piece of hardware that is part of your computer, and can come in many sizes. An average amount of memory to have in a computer these days might be around 8 to 16 gigabytes. As the computer sees it, memory is just a long list of 1’s and 0’s. Each space that holds a 1 or 0 is known as a bit. A bit is the smallest denomination of memory. When the computer interacts with memory, it actually doesn’t view the individual bits one by one; instead, it groups memory into cells, each cell composed of 8 bits. The reason for this is that a single bit on its own has little use, so it was decided that grouping them together to form a more useful unit would be more efficient. That grouping of 8 bits is known as a byte, and is the standard unit that we use when we talk about memory in a computer. The choice of exactly 8 bits is somewhat arbitrary, as other sizes have been used to define a byte in the earlier days of computers. It just turned out that 8 became the most popular and widely accepted number, and as such it remains standard today.\n        </div>\n\n        <div class='Article-paragraph'>\n        Each byte in memory is given a unique identifier. This is called a byte’s address. An address is a number, formatted in hexadecimal. Because memory is like a long list of bytes, the address of a byte increases by one from the byte before it. The byte with address 6 has byte 5 before it, and byte 7 after it.\n        </div>  \n\n        <div class='Article-paragraph'>\n        When we declare a variable in our program, the computer will choose a byte in memory that isn’t being used and reserve that byte. This byte’s address is now associated with that variable. The value assigned to the variable will be stored there. This process takes place at the beginning of a program’s execution. It is known as static allocation.\n        </div>\n\n        <div class='Article-paragraph'>\n        A caveat to this is that not all data types can fit in one byte. Many data types require more than one byte of space in memory. In this case, multiple bytes are allocated for a variable. The bytes will all be next to each other and are allocated at the same time. The most common data types that are larger than one byte include <span class='Article-paragraph-code'>int</span> at 4 bytes, <span class='Article-paragraph-code'>float</span> at 4 bytes, and <span class='Article-paragraph-code'>double</span> at 8 bytes. The ones that will fit in one byte are <span class='Article-paragraph-code'>char</span> and <span class='Article-paragraph-code'>boolean</span>.\n        </div>\n\n        <div class='Article-paragraph'>\n        What about arrays? Well, consider an example of how an array is declared: <span class='Article-paragraph-code'>int numbers[10]</span>. One <span class='Article-paragraph-code'>int</span> takes up 4 bytes in memory. This array will store 10 of them. Therefore, we need 4 x 10 = 40 bytes. Again, these bytes will all be located next to each other in memory.\n        </div>\n\n        <div class='Article-paragraph'>\n        So this is how memory is allocated when we declare a variable. The computer begins execution of our program by looking through all of the variable declarations in our code and reserving the required bytes in memory. When we allocate memory statically like this, we know how much space we will use. But what if we want our code to be more flexible and have the ability to use varying amounts of memory on each run?\n        </div>\n\n        <div class='Article-paragraph'>\n        To picture this, let’s consider a program that asks a user for a list of ingredients in a recipe. Our program will store those ingredients in an array. One issue we run into is that not all recipes will have the same number of ingredients. So what should the size of our array be? It’s not efficient to set a constant size for the array, such as <span class='Article-paragraph-code'>string ingredients[10]</span>. But our code won’t compile unless we do this. To solve this problem, let’s talk about how we can access memory dynamically as our program runs. It turns out that we can ask the user what the appropriate size should be before we allocate space.\n        </div>\n\n        <div class='Article-paragraph'>\n        The technique of allocating memory while our program is running is known as dynamic programming. To do this, we actually don’t declare regular variables; instead, we declare something called a pointer. A pointer is given a data type, just like a variable. An integer pointer would be declared like <span class='Article-paragraph-code'>int* number;</span>. The key idea is that the value of the pointer is actually a memory address. Its data type describes which kind of data is stored at that address. So if the value of <span class='Article-paragraph-code'>int* number</span> is 1000, then we would know that an integer is being stored at the byte with address 1000. The integer actually takes up bytes 1000-1003, since integers require 4 bytes of storage. However, <span class='Article-paragraph-code'>number</span> actually only stores the address of the first byte, 1000.\n        </div>\n\n        <div class='Article-paragraph'>\n        If we declare our <span class='Article-paragraph-code'>ingredients</span> array from before using a pointer, we don’t have to provide it with a constant size. We can support storage of recipes that have any number of ingredients to them. The size can be determined while the program is running. First, we can ask the user how many ingredients are in their recipe, and store that in a variable. Then, we can use that variable as the size to declare <span class='Article-paragraph-code'>ingredients</span> with. Here is how we can code this:\n        </div>\n\n        <div class='Article-code-block'>\n        <CodeBlock \n          text={`int number_of_ingredients;\n\ncout << “How many ingredients are in your recipe?” << endl;\ncin >> number_of_ingredients;\n\n// Use the new keyword to allocate memory with a pointer\nstring* ingredients = new string[number_of_ingredients];\n`}\n          language='cpp'\n          theme={railscast}\n        />\n        </div>\n\n        <div class='Article-paragraph'>\n        A side effect of dynamic programming is that while we can allocate new memory during runtime, we should also free up that memory when we are done with it. It is possible that we can actually run out of memory. To free up memory we use the <span class='Article-paragraph-code'>delete</span> keyword. Using <span class='Article-paragraph-code'>delete</span> on a pointer tells it to stop referencing an address. Once that happens, that byte (or sequence of bytes) is no longer recognized as being used for anything. That space can be allocated for something else later on in the program’s runtime. Here is how we would add this to our code from before:\n        </div>\n\n        <div class='Article-code-block'>\n        <CodeBlock \n          text={`int number_of_ingredients;\n\ncout << “How many ingredients are in your recipe?” << endl;\ncin >> number_of_ingredients;\n\nstring* ingredients;\ningredients = new string[number_of_ingredients];\n\n// Do something with ingredients\n\ndelete[] ingredients;\n// All of the bytes in memory used by ingredients are now free\n`}\n          language='cpp'\n          theme={railscast}\n        />\n        </div>\n\n        <div class='Article-paragraph'>\n        We attached the brackets to the <span class='Article-paragraph-code'>delete</span> keyword here because we are deleting an array. If your pointer is not referencing an array, you would just use the <span class='Article-paragraph-code'>delete</span> keyword on its own.\n        </div>\n\n        <div class='Article-paragraph'>\n        There’s a lot more that you can do with pointers and dynamic programming. In fact, pointers are the backbone to most programs and the data structures that they use. It really just becomes necessary to know how to allocate memory dynamically like this if we want to make more advanced programs. I think it’s good to also keep the fundamental ideas in mind, though.\n        </div>\n\n      </div>\n    </div>\n  )\n}\n\nexport default MemoryPointersDynamicProgramming","import { Route } from \"react-router-dom\"\n\nimport AlgorithmBasics from \"./components/Articles/Pages/AlgorithmBasics\"\nimport MemoryPointersDynamicProgramming from \"./components/Articles/Pages/MemoryPointersDynamicProgramming\"\n\nconst ArticleRoutes = () => {\n  return (\n    <>\n\n      <Route exact path='/basics_of_algorithm_analysis'>\n        <AlgorithmBasics />\n      </Route>\n\n      <Route exact path='/memory_pointers_and_dynamic_programming'>\n        <MemoryPointersDynamicProgramming />\n      </Route>\n\n    </>\n  )\n}\n\nexport default ArticleRoutes","import './Footer.css'\n\nconst Footer = () => {\n  return (\n    <div className='Footer'>© 2022 Brendan Chess</div>\n  )\n}\n\nexport default Footer","import {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom'\nimport './App.css'\nimport './style.css'\n\nimport Navigation from './components/Navigation/Navigation'\nimport Home from './components/Home/Home'\nimport Portfolio from './components/Portfolio/Portfolio'\nimport Contact from './components/Contact/Contact'\nimport ArticleRoutes from './ArticleRoutes'\nimport Footer from './components/Footer/Footer'\n\nconst App = () => {\n  return (\n    <Router>\n      <div className='App-container'>\n        <Navigation />\n        <Switch>\n\n          <Route exact path='/'>\n            <Home />\n          </Route>\n\n          <Route exact path='/portfolio'>\n            <Portfolio />\n          </Route>\n\n          <Route exact path='/contact'>\n            <Contact />\n          </Route>\n\n          <ArticleRoutes />\n\n        </Switch>\n\n        \n      </div>\n      <Footer />\n    </Router>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}